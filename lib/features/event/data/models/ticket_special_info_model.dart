import 'package:suri_checking_event_app/features/event/domain/entities/ticket_special_info_entity.dart';

class TicketSpecialInfoModel extends TicketSpecialInfoEntity {
  const TicketSpecialInfoModel({
    required String eventName,
    String? accountName,
    String? accountPhoto,
    String? eventAccountTypeName,
    String? accountPhone,
    String? eventPhoto,
    String? eventBanner,
    String? eventBannerBase64,
    String? addressEvent,
    int? rankId,
    DateTime? startDate,
    DateTime? endDate,
    String? eventInfo,
    bool? isCheckin,
    bool? isCheckedGift,
    bool? isSpecialEvent,
    DateTime? timeCheckin,
    required int id,
    required int active,
    String? name,
    String? info,
    String? description,
    required int eventId,
    required int accountId,
    required int eventAccountTypeId,
    String? typeAccount,
    String? address,
    String? phone,
    String? photo,
    DateTime? createdTime,
    String? gmail,
    String? note,
    String? relationship,
    String? account,
    String? event,
    String? eventAccountType,
    List<dynamic> eventAccountCheckins = const [],
  }) : super(
          eventName: eventName,
          accountName: accountName,
          accountPhoto: accountPhoto,
          eventAccountTypeName: eventAccountTypeName,
          accountPhone: accountPhone,
          eventPhoto: eventPhoto,
          eventBanner: eventBanner,
          eventBannerBase64: eventBannerBase64,
          addressEvent: addressEvent,
          rankId: rankId,
          startDate: startDate,
          endDate: endDate,
          eventInfo: eventInfo,
          isCheckin: isCheckin,
          isCheckedGift: isCheckedGift,
          isSpecialEvent: isSpecialEvent,
          timeCheckin: timeCheckin,
          id: id,
          active: active,
          name: name,
          info: info,
          description: description,
          eventId: eventId,
          accountId: accountId,
          eventAccountTypeId: eventAccountTypeId,
          typeAccount: typeAccount,
          address: address,
          phone: phone,
          photo: photo,
          createdTime: createdTime,
          gmail: gmail,
          note: note,
          relationship: relationship,
          account: account,
          event: event,
          eventAccountType: eventAccountType,
          eventAccountCheckins: eventAccountCheckins,
        );

  factory TicketSpecialInfoModel.fromJson(Map<String, dynamic> json) {
    return TicketSpecialInfoModel(
      eventName: json['eventName'] ?? '',
      accountName: json['accountName'],
      accountPhoto: json['accountPhoto'],
      eventAccountTypeName: json['eventAccountTypeName'],
      accountPhone: json['accountPhone'],
      eventPhoto: json['eventPhoto'],
      eventBanner: json['eventBanner'],
      eventBannerBase64: json['eventBannerBase64'],
      addressEvent: json['addressEvent'],
      rankId: json['rankId'],
      startDate:
          json['startDate'] != null ? DateTime.parse(json['startDate']) : null,
      endDate: json['endDate'] != null ? DateTime.parse(json['endDate']) : null,
      eventInfo: json['eventInfo'],
      isCheckin: json['isCheckin'],
      isCheckedGift: json['isCheckedGift'],
      isSpecialEvent: json['isSpecialEvent'],
      timeCheckin: json['timeCheckin'] != null
          ? DateTime.parse(json['timeCheckin'])
          : null,
      id: json['id'] ?? 0,
      active: json['active'] ?? 0,
      name: json['name'],
      info: json['info'],
      description: json['description'],
      eventId: json['eventId'] ?? 0,
      accountId: json['accountId'] ?? 0,
      eventAccountTypeId: json['eventAccountTypeId'] ?? 0,
      typeAccount: json['typeAccount'],
      address: json['address'],
      phone: json['phone'],
      photo: json['photo'],
      createdTime: json['createdTime'] != null
          ? DateTime.parse(json['createdTime'])
          : null,
      gmail: json['gmail'],
      note: json['note'],
      relationship: json['relationship'],
      account: json['account'],
      event: json['event'],
      eventAccountType: json['eventAccountType'],
      eventAccountCheckins: json['eventAccountCheckins'] ?? [],
    );
  }

  Map<String, dynamic> toJson() {
    return {
      'eventName': eventName,
      'accountName': accountName,
      'accountPhoto': accountPhoto,
      'eventAccountTypeName': eventAccountTypeName,
      'accountPhone': accountPhone,
      'eventPhoto': eventPhoto,
      'eventBanner': eventBanner,
      'eventBannerBase64': eventBannerBase64,
      'addressEvent': addressEvent,
      'rankId': rankId,
      'startDate': startDate?.toIso8601String(),
      'endDate': endDate?.toIso8601String(),
      'eventInfo': eventInfo,
      'isCheckin': isCheckin,
      'isCheckedGift': isCheckedGift,
      'isSpecialEvent': isSpecialEvent,
      'timeCheckin': timeCheckin?.toIso8601String(),
      'id': id,
      'active': active,
      'name': name,
      'info': info,
      'description': description,
      'eventId': eventId,
      'accountId': accountId,
      'eventAccountTypeId': eventAccountTypeId,
      'typeAccount': typeAccount,
      'address': address,
      'phone': phone,
      'photo': photo,
      'createdTime': createdTime?.toIso8601String(),
      'gmail': gmail,
      'note': note,
      'relationship': relationship,
      'account': account,
      'event': event,
      'eventAccountType': eventAccountType,
      'eventAccountCheckins': eventAccountCheckins,
    };
  }
}
